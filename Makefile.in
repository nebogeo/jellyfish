TARGET  := jellyfish
TARGET_LIB := libjellyfish

SRCS :=    src/graphics.cpp\
	   src/audio.cpp\
	   src/interpreter.cpp\
	   src/core/fixed.cpp\
           src/core/list.cpp\
           src/core/idmap.cpp\
           src/scheme/scheme.cpp\
	   src/scheme/interface.cpp\
           src/core/geometry.cpp\
           src/core/noise.cpp\
           src/core/pixels.cpp\
           src/core/osc.cpp\
	   src/core/stream.cpp\
           src/fluxa/sample.cpp\
           src/fluxa/allocator.cpp\
           src/fluxa/graph.cpp\
           src/fluxa/graph_node.cpp\
           src/fluxa/modules.cpp\
           src/fluxa/module_nodes.cpp\
           src/fluxa/event.cpp\
           src/fluxa/event_queue.cpp\
	   src/fluxa/time.cpp\
	   src/fluxa/ring_buffer.cpp\
	   src/fluxa/command_ring_buffer.cpp\
	   src/fluxa/OSC_server.cpp \
	   src/audio/portaudio_client.cpp \
           src/engine/obj_reader.cpp\
           src/engine/engine.cpp\
           src/engine/primitive.cpp\
           src/engine/text_primitive.cpp\
           src/engine/scenegraph.cpp\
           src/engine/scenenode.cpp\
           src/engine/texture.cpp\
           src/engine/shader.cpp\
           src/engine/nomadic.cpp\
           src/engine/jellyfish_primitive.cpp\
           src/engine/jellyfish.cpp\
	   src/linux/glut_graphics.cpp\
	   src/rpi/graphics.cpp\
	   src/rpi/input.cpp

MAIN_SRCS    := src/main.cpp

# for the minute, go out and up to link to the vision lib
CCFLAGS = -ggdb -Ofast -march=native -mtune=native -ffast-math -Wno-unused -Isrc -Wno-write-strings -DASSETS_PATH=\"@prefix@/lib/jellyfish/\" -I/opt/local/include -I/usr/include/freetype2/
LDFLAGS = @LDFLAGS@
LIBS    = @LIBS@

CC = @CXX@
AR = ar
OBJS      := ${SRCS:.cpp=.o}
MAIN_OBJS := ${MAIN_SRCS:.cpp=.o}
DEPS      := ${SRCS:.cpp=.dep}
MAIN_DEPS := ${MAIN_SRCS:.cpp=.dep}
XDEPS     := $(wildcard ${DEPS})
.PHONY: all clean distclean
all:: ${TARGET}

ifneq (${XDEPS},)
include ${XDEPS}
endif

${TARGET}: ${MAIN_OBJS} ${OBJS} ${COBJS}
	${CC} ${LDFLAGS} -o $@ $^ ${LIBS}

${OBJS}: %.o: %.cpp %.dep
	${CC} ${CCFLAGS} -o $@ -c $<

${MAIN_OBJS}: %.o: %.cpp %.dep
	${CC} ${CCFLAGS} -o $@ -c $<

${DEPS}: %.dep: %.cpp Makefile
	${CC} ${CCFLAGS} -MM $< > $@

${MAIN_DEPS}: %.dep: %.cpp Makefile
	${CC} ${CCFLAGS} -MM $< > $@

library: ${OBJS} ${COBJS}
	$(AR) $(ARFLAGS) ${TARGET_LIB}.a ${OBJS} ${COBJS}

dylib: ${OBJS} ${COBJS}
	${CC} -dynamiclib -undefined suppress -flat_namespace ${OBJS} -o ${TARGET_LIB}.dylib

clean:: cleandeps
	-rm -f *~ src/*.o src/*/*.o ${TARGET}

cleandeps::
	-rm -f src/*.dep src/*/*.dep

install:: ${TARGET}
	install -d $(DESTDIR)@prefix@/bin/
	install jellyfish $(DESTDIR)@prefix@/bin/
	install -d $(DESTDIR)@prefix@/lib/jellyfish/
	install assets/*.* $(DESTDIR)@prefix@/lib/jellyfish/
	install -d $(DESTDIR)/usr/local/lib/jellyfish/shaders/
	install assets/shaders/*.* $(DESTDIR)/usr/local/lib/jellyfish/shaders/

install_library:: library
	install -d $(DESTDIR)@prefix@/lib/
	install $(TARGET_LIB).a $(DESTDIR)@prefix@/lib/
	make install_headers

install_dylib:: dylib
	install -d $(DESTDIR)@prefix@/lib/
	install $(TARGET_LIB).dylib $(DESTDIR)@prefix@/lib/
	make install_headers

install_headers:
	install -d $(DESTDIR)@prefix@/include/jellyfish/
	install src/*.h $(DESTDIR)@prefix@/include/jellyfish/
	install -d $(DESTDIR)@prefix@/include/jellyfish/core/
	install src/core/*.h $(DESTDIR)@prefix@/include/jellyfish/core/
	install -d $(DESTDIR)@prefix@/include/jellyfish/engine/
	install src/engine/*.h $(DESTDIR)@prefix@/include/jellyfish/engine/
	install -d $(DESTDIR)@prefix@/include/jellyfish/audio/
	install src/audio/*.h $(DESTDIR)@prefix@/include/jellyfish/audio/
	install -d $(DESTDIR)@prefix@/include/jellyfish/fluxa/
	install src/fluxa/*.h $(DESTDIR)@prefix@/include/jellyfish/fluxa/

distclean:: clean
	-rm -rf config.status autom4te.cache config.log Makefile
