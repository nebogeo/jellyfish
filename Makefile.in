TARGET  := jellyfish

SRCS    := src/main.cpp\
	      src/core/fixed.cpp\
          src/core/list.cpp\
          src/core/idmap.cpp\
          src/scheme/scheme.cpp\
          src/core/geometry.cpp\
          src/core/noise.cpp\
          src/core/pixels.cpp\
          src/core/osc.cpp\
          src/fluxa/Sample.cpp\
          src/fluxa/Allocator.cpp\
          src/fluxa/Graph.cpp\
          src/fluxa/GraphNode.cpp\
          src/fluxa/Modules.cpp\
          src/fluxa/ModuleNodes.cpp\
          src/fluxa/Event.cpp\
          src/fluxa/EventQueue.cpp\
          src/fluxa/Time.cpp\
		  src/audio/alsa.cpp \
          src/engine/obj_reader.cpp\
          src/engine/engine.cpp\
          src/engine/primitive.cpp\
          src/engine/text_primitive.cpp\
          src/engine/scenegraph.cpp\
          src/engine/scenenode.cpp\
          src/engine/texture.cpp\
          src/engine/nomadic.cpp\
          src/engine/jellyfish_primitive.cpp\
          src/engine/jellyfish.cpp\
	  src/linux/glut_graphics.cpp\
	  src/rpi/graphics.cpp\
	  src/rpi/input.cpp

# for the minute, go out and up to link to the vision lib
CCFLAGS = @CFLAGS@ -ggdb -O3 -fpermissive -ffast-math -Wno-unused -Isrc -Wno-write-strings -DASSETS_PATH=\"@prefix@/lib/jellyfish/\"
LDFLAGS = @LDFLAGS@
LIBS    = @LIBS@

CC = @CXX@
OBJS    := ${SRCS:.cpp=.o}
DEPS    := ${SRCS:.cpp=.dep}
XDEPS   := $(wildcard ${DEPS})
.PHONY: all clean distclean
all:: ${TARGET}

ifneq (${XDEPS},)
include ${XDEPS}
endif

${TARGET}: ${OBJS} ${COBJS}
	${CC} ${LDFLAGS} -o $@ $^ ${LIBS}

${OBJS}: %.o: %.cpp %.dep
	${CC} ${CCFLAGS} -o $@ -c $<

${DEPS}: %.dep: %.cpp Makefile
	${CC} ${CCFLAGS} -MM $< > $@

clean:: cleandeps
	-rm -f *~ src/*.o src/*/*.o ${TARGET}

cleandeps::
	-rm -f src/*.dep src/*/*.dep

install:: ${TARGET}
	install -d $(DESTDIR)@prefix@/bin/
	install jellyfish $(DESTDIR)@prefix@/bin/
	install -d $(DESTDIR)@prefix@/lib/jellyfish/
	install assets/* $(DESTDIR)@prefix@/lib/jellyfish/

distclean:: clean
	-rm -rf config.status autom4te.cache config.log Makefile
